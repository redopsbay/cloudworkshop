<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps Workshop</title><link>https://devops.redopsbay.dev/</link><description>Recent content on DevOps Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://devops.redopsbay.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>API development with traefik &amp; docker</title><link>https://devops.redopsbay.dev/reverse-proxy/api-development-with-traefik-and-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devops.redopsbay.dev/reverse-proxy/api-development-with-traefik-and-docker/</guid><description>The Problem ðŸ¤¯ You have multiple docker or container services running on a single machine that uses same port during your development, and how will you run all this containers all at once without changing the port numbers?
Of course you can run it through docker using the parameters -p 8080:8080 and -p 9090:8080.
But it&amp;rsquo;s painful everytime you will run it since you will have to change each port on your localhost.</description></item><item><title>Contributors</title><link>https://devops.redopsbay.dev/about/contributors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devops.redopsbay.dev/about/contributors/</guid><description>Contributors ðŸš§</description></item><item><title>Introduction to Jenkins</title><link>https://devops.redopsbay.dev/cicd/jenkins/introductiontojenkins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devops.redopsbay.dev/cicd/jenkins/introductiontojenkins/</guid><description>What is Jenkins? Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software. Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.
It also allow you to automate your deployment starting from lower environment such as dev, qa, staging, pre-prod and prod.</description></item><item><title>Jenkins Setup Docker Compose</title><link>https://devops.redopsbay.dev/cicd/jenkins/jenkinssetupdocker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devops.redopsbay.dev/cicd/jenkins/jenkinssetupdocker/</guid><description>Jenkins Up &amp;amp; Running on Docker Compose ðŸš€ For local development, we can use jenkins thru docker-compose to simplify things.
We will use the latest nginx:alpine and jenkins/jenkins:lts lts image version.
In real world, you cannot use jenkins without a reverse proxy, but it doesn&amp;rsquo;t mean that it would not work. But it will leave your jenkins server VULNERABLE.
let&amp;rsquo;s create a docker-compose.yaml file: --- version: &amp;#34;3&amp;#34; services: jenkins: image: jenkins/jenkins:lts privileged: true user: root ports: - 8080:8080 - 50000:50000 container_name: jenkins volumes: - jenkins:/var/jenkins_home - /var/run/docker.</description></item><item><title>Jenkins Setup on Kubernetes</title><link>https://devops.redopsbay.dev/cicd/jenkins/jenkinssetupk8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devops.redopsbay.dev/cicd/jenkins/jenkinssetupk8s/</guid><description>Jenkins Up &amp;amp; Running on K8s ðŸš€ For local development, we can use jenkins thru kubernetes to simplify things or to replicate your existing environment such as kubernetes.
We will use the latest jenkins-controller jenkins/jenkins:lts lts image version.
Note: Do not use in production
let&amp;rsquo;s create a namespace.yaml file: apiVersion: v1 kind: Namespace metadata: name: jenkins-controller then apply it thru:
kubectl apply -f namespace.yaml Next, let&amp;rsquo;s create rbac-and-serviceaccount.yaml file: --- apiVersion: rbac.</description></item></channel></rss>