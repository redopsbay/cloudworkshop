[{"uri":"https://devops.redopsbay.dev/about/","title":"About Workshop","tags":[],"description":"","content":"\nA labs driven workshop to explore cloud native and real-world scenario\u0026rsquo;s using Opensource Technologies and Cloud Native Solutions.\nContributors Quick Introduction To DevOps "},{"uri":"https://devops.redopsbay.dev/configuration-management/ansible/","title":"Ansible","tags":[],"description":"","content":"\nThis section covers basic demonstration about Configuration Management with Ansible.\n"},{"uri":"https://devops.redopsbay.dev/","title":"DevOps Workshop","tags":[],"description":"","content":"\nDevOps Workshops Welcome to DevOps Workshops!\nA basic workshop that provides solutions in a real-world scenario\u0026rsquo;s. Feel free to share your feedback!\nGive us a star: GitHub Official Repository\nNote: Demonstrations are not built in chronological order. The solutions are experience-based and widely available.\n"},{"uri":"https://devops.redopsbay.dev/cicd/jenkins/","title":"Jenkins","tags":[],"description":"","content":"\nThis section covers basic demonstration about CICD with Jenkins.\nIntroduction to Jenkins Jenkins Setup Docker Compose Jenkins Setup on Kubernetes "},{"uri":"https://devops.redopsbay.dev/reverse-proxy/api-development-with-traefik-and-docker/","title":"API development with traefik &amp; docker","tags":[],"description":"","content":"\nThe Problem ü§Ø You have multiple docker or container services running on a single machine that uses same port during your development, and how will you run all this containers all at once without changing the port numbers?\nOf course you can run it through docker using the parameters -p 8080:8080 and -p 9090:8080.\nBut it\u0026rsquo;s painful everytime you will run it since you will have to change each port on your localhost. This is what traefik proxy comes in.\nScenario üòÅ For example, you have multiple docker services in your docker-compose file running multiple web applications or api endpoints and it\u0026rsquo;s both designed to run on port 8080.\n# In my case, I will use my personal domain `redopsbay.dev`. If you don\u0026#39;t have one. # you can always modify your `/etc/hosts` or `C:\\Windows\\System32\\drivers\\etc\\hosts` file to add entries like: # /etc/hosts or C:\\Windows\\System32\\drivers\\etc\\hosts # 127.0.0.1 api.example.org version: \u0026#34;3\u0026#34; services: # Traefik proxy will be the frontend or edge router of your container services traefik-proxy: image: traefik:v3.0 container_name: traefik-proxy command: - --api.insecure=true - --providers.docker - --entrypoints.http.address=:80 # Expose port `80` on your machine ports: - \u0026#34;80:80\u0026#34; volumes: # give traefik-proxy access into docker.sock - /var/run/docker.sock:/var/run/docker.sock # `user-api` running port `8080` user-api: image: user-api:latest build: context: user dockerfile: Dockerfile container_name: user-api labels: - traefik.enable=true - traefik.http.services.user-api.loadbalancer.server.port=8000 - traefik.http.routers.user-api.rule=Host(`api.redopsbay.dev`) \u0026amp;\u0026amp; PathPrefix(`/user`) - traefik.http.routers.user-api.entrypoints=http - traefik.http.middlewares.user-api.stripprefix.prefixes=/user - traefik.http.routers.user-api.middlewares=user-api # using `http` entrypoint that utilizes port `80` ports: - 8000 # `product-api` running port `80` product-api: image: product-api:latest build: context: product dockerfile: Dockerfile container_name: product-api labels: - traefik.enable=true - traefik.http.services.product-api.loadbalancer.server.port=8000 - traefik.http.routers.product-api.rule=Host(`api.redopsbay.dev`) \u0026amp;\u0026amp; PathPrefix(`/product`) - traefik.http.routers.product-api.entrypoints=http - traefik.http.middlewares.product-api.stripprefix.prefixes=/product - traefik.http.routers.product-api.middlewares=product-api # using `http` entrypoint also that utilizes port `80` ports: - 8000 If you run and thru docker-compose up:\ndocker-compose up If you visit the url in my case it\u0026rsquo;s http://api.redopsbay.dev/user/1 \u0026amp; http://api.redopsbay.dev/product/3, the response will be:\n# http://api.redopsbay.dev/user/ {\u0026#34;id\u0026#34;:1,\u0026#34;username\u0026#34;:\u0026#34;andres\u0026#34;} # http://api.redopsbay.dev/product/ {\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;testproduct\u0026#34;} That\u0026rsquo;s all!!! üëå Note: Traefik does not tied up only to a api development. It has a lot of use cases like middleware and edge routing experience and it\u0026rsquo;s pretty fast!! References Traefik Offical Documentation Source Code api-development-with-traefik-and-docker.tar.gz "},{"uri":"https://devops.redopsbay.dev/configuration-management/","title":"Configuration Management","tags":[],"description":"","content":"\nThis section covers basic demonstration about Configuration Management.\nAnsible "},{"uri":"https://devops.redopsbay.dev/cicd/","title":"Continuous Integration and Continuous Delivery","tags":[],"description":"","content":"\nThis section covers basic demonstration about Continuous Integration and Continuous Delivery or CI/CD.\nJenkins "},{"uri":"https://devops.redopsbay.dev/about/contributors/","title":"Contributors","tags":[],"description":"","content":"Contributors üöß "},{"uri":"https://devops.redopsbay.dev/docker/","title":"Docker","tags":[],"description":"","content":"\nThis section covers basic demonstration about Docker containerization.\n"},{"uri":"https://devops.redopsbay.dev/git/","title":"Git","tags":[],"description":"","content":"\nThis section covers basic demonstration about Git version control system.\n"},{"uri":"https://devops.redopsbay.dev/iac/","title":"IaC","tags":[],"description":"","content":"\nThis section covers basic demonstration about Infrastructure As Code or IaC.\nTopic: Infrastructure As Code "},{"uri":"https://devops.redopsbay.dev/cicd/jenkins/introductiontojenkins/","title":"Introduction to Jenkins","tags":[],"description":"","content":"\nWhat is Jenkins? Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.\nJenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.\nIt also allow you to automate your deployment starting from lower environment such as:\ndev qa staging pre-prod prod etc It allows you to define / create scripts by using Groovy Scripts to create logical workflow that you would use to automate your build / testing / delivery or deployment.\n"},{"uri":"https://devops.redopsbay.dev/kubernetes/","title":"Kubernetes","tags":[],"description":"","content":"\nThis section covers basic demonstration about Kubernetes a container orchestrator.\n"},{"uri":"https://devops.redopsbay.dev/observability/","title":"Observability","tags":[],"description":"","content":"\nThis section covers basic demonstration about Observability.\n"},{"uri":"https://devops.redopsbay.dev/about/quick-intro-01/","title":"Quick Introduction To DevOps","tags":[],"description":"","content":"\nWhat is DevOps? According to GitLab, \u0026ldquo;DevOps combines development (Dev) and operations (Ops) to increase the efficiency, speed, and security of software development and delivery compared to traditional processes. A more nimble software development lifecycle results in a competitive advantage for businesses and their customers\u0026rdquo;\nCommon misconceptions about DevOps One of the most common misconceptions is that DevOps is a specific job title or position within a business enterprise. In truth, DevOps is not a job title. It is a way of life that transcends traditional silos.\nDevOps encourages collaboration among improvement, operations, and different cross-practical groups. Instead of specializing in an unmarried DevOps engineer, companies need to aim to instill DevOps standards across all groups, fostering a subculture of shared responsibility and cooperation.\nIn short, DevOps is solely about automation like automating the deployment process. That\u0026rsquo;s the word. PROCESS.\n"},{"uri":"https://devops.redopsbay.dev/reverse-proxy/","title":"Reverse Proxy","tags":[],"description":"","content":"\nThis section covers basic demonstration about Reverse Proxy.\nAPI development with traefik \u0026amp; docker "},{"uri":"https://devops.redopsbay.dev/cicd/jenkins/jenkinssetupdocker/","title":"Jenkins Setup Docker Compose","tags":[],"description":"","content":"\nFiring up Jenkins thru Docker Compose üöÄ For local development, we can use jenkins thru docker-compose to quickly fire up our Jenkins Server.\nWill use the latest nginx:alpine and jenkins/jenkins:lts lts image as it\u0026rsquo;s latest version.\nIn real world, it is not recommended to run jenkins without a reverse proxy due to the limitations of it\u0026rsquo;s web server configuration, but it doesn\u0026rsquo;t mean that it would not work. But it will leave your jenkins server VULNERABLE and prone to error.\nPre-requisites Docker Installed Docker Compose Binary Let\u0026rsquo;s create a docker-compose.yaml file: --- version: \u0026#34;3\u0026#34; services: jenkins: image: jenkins/jenkins:lts privileged: true user: root ports: - 8080:8080 - 50000:50000 container_name: jenkins volumes: - jenkins:/var/jenkins_home - /var/run/docker.sock:/var/run/docker.sock networks: - jenkins nginx: image: nginx:alpine container_name: nginx-proxy ports: - 80:80 volumes: - ${PWD}/nginx.conf:/etc/nginx/conf.d/default.conf networks: - jenkins volumes: jenkins: nginx: networks: jenkins: Then, we will create nginx.conf file to proxy our jenkins server. Note on the server jenkins:8080; inside the upstream jenkins-server block. Since we specify our docker-compose network named as jenkins\nupstream jenkins-server { keepalive 32; # keepalive connections server jenkins:8080; # jenkins ip and port } # Required for Jenkins websocket agents map $http_upgrade $connection_upgrade { default upgrade; \u0026#39;\u0026#39; close; } server { listen 80; # Listen on port 80 for IPv4 requests # this is the jenkins web root directory # (mentioned in the output of \u0026#34;systemctl cat jenkins\u0026#34;) root /var/run/jenkins/war/; access_log /var/log/nginx/jenkins.access.log; error_log /var/log/nginx/jenkins.error.log; # pass through headers from Jenkins that Nginx considers invalid ignore_invalid_headers off; location ~ \u0026#34;^/static/[0-9a-fA-F]{8}\\/(.*)$\u0026#34; { # rewrite all static files into requests to the root # E.g /static/12345678/css/something.css will become /css/something.css rewrite \u0026#34;^/static/[0-9a-fA-F]{8}\\/(.*)\u0026#34; /$1 last; } location /userContent { # have nginx handle all the static requests to userContent folder # note : This is the $JENKINS_HOME dir root /var/lib/jenkins/; if (!-f $request_filename){ # this file does not exist, might be a directory or a /**view** url rewrite (.*) /$1 last; break; } sendfile on; } location / { sendfile off; proxy_pass http://jenkins:8080; proxy_redirect default; proxy_http_version 1.1; # Required for Jenkins websocket agents proxy_set_header Connection $connection_upgrade; proxy_set_header Upgrade $http_upgrade; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_max_temp_file_size 0; #this is the maximum upload size client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffering off; proxy_request_buffering off; # Required for HTTP CLI commands proxy_set_header Connection \u0026#34;\u0026#34;; # Clear for keepalive } } Next, run the docker-compose command. docker-compose up Next, we can now visit our jenkins server on http://localhost. Nicely done üòâ !\nSource Code jenkins-setup-docker.tar.gz "},{"uri":"https://devops.redopsbay.dev/cicd/jenkins/jenkinssetupk8s/","title":"Jenkins Setup on Kubernetes","tags":[],"description":"","content":"\nJenkins Up \u0026amp; Running on K8s üöÄ For quick deployment, we can deploy jenkins server thru kubernetes cluster.\nWe will use the latest jenkins-controller jenkins/jenkins:lts as lts image version.\nNote: Do not use in production\nLet\u0026rsquo;s create a namespace.yaml file: apiVersion: v1 kind: Namespace metadata: name: jenkins-controller then apply it thru:\nkubectl apply -f namespace.yaml Next, let\u0026rsquo;s create rbac-and-serviceaccount.yaml file: --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: jenkins-admin rules: - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;*\u0026#34;] verbs: [\u0026#34;*\u0026#34;] --- apiVersion: v1 kind: ServiceAccount metadata: name: jenkins-admin namespace: jenkins-controller --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: jenkins-admin roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: jenkins-admin subjects: - kind: ServiceAccount name: jenkins-admin namespace: jenkins-controller "},{"uri":"https://devops.redopsbay.dev/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://devops.redopsbay.dev/tags/","title":"Tags","tags":[],"description":"","content":""}]